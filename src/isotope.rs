use self::Isotope::*;
use crate::{
    isotopes::{
        Ag, Am, Ar, At, Ba, Bk, Br, Ca, Cd, Ce, Cf, Cl, Cm, Cr, Cu, Dy, Er, Eu, Fe, Ga, Gd, Ge, He,
        Hf, Hg, In, Ir, Kr, La, Li, Lu, Md, Mg, Mo, Nd, Ne, Ni, Np, Os, Pb, Pd, Pm, Po, Pt, Pu, Ra,
        Rb, Re, Rn, Ru, Sb, Se, Si, Sm, Sn, Sr, Ta, Tc, Te, Th, Ti, Tl, Xe, Yb, Zn, Zr, B, C, H, K,
        N, O, S, U, V, W,
    },
    uncertain, Element, Error, Result, Uncertain,
};
use derive_more::From;
#[cfg(feature = "serde")]
use serde::{Deserialize, Serialize};
use std::str::FromStr;
use strum::IntoEnumIterator;

/// Isotope
#[derive(Clone, Copy, Debug, Eq, From, Hash, Ord, PartialEq, PartialOrd)]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
pub enum Isotope {
    H(H),
    He(He),
    Li(Li),
    Be,
    B(B),
    C(C),
    N(N),
    O(O),
    F,
    Ne(Ne),
    Na,
    Mg(Mg),
    Al,
    Si(Si),
    P,
    S(S),
    Cl(Cl),
    Ar(Ar),
    K(K),
    Ca(Ca),
    Sc,
    Ti(Ti),
    V(V),
    Cr(Cr),
    Mn,
    Fe(Fe),
    Co,
    Ni(Ni),
    Cu(Cu),
    Zn(Zn),
    Ga(Ga),
    Ge(Ge),
    As,
    Se(Se),
    Br(Br),
    Kr(Kr),
    Rb(Rb),
    Sr(Sr),
    Y,
    Zr(Zr),
    Nb,
    Mo(Mo),
    Tc(Tc),
    Ru(Ru),
    Rh,
    Pd(Pd),
    Ag(Ag),
    Cd(Cd),
    In(In),
    Sn(Sn),
    Sb(Sb),
    Te(Te),
    I,
    Xe(Xe),
    Cs,
    Ba(Ba),
    La(La),
    Ce(Ce),
    Pr,
    Nd(Nd),
    Pm(Pm),
    Sm(Sm),
    Eu(Eu),
    Gd(Gd),
    Tb,
    Dy(Dy),
    Ho,
    Er(Er),
    Tm,
    Yb(Yb),
    Lu(Lu),
    Hf(Hf),
    Ta(Ta),
    W(W),
    Re(Re),
    Os(Os),
    Ir(Ir),
    Pt(Pt),
    Au,
    Hg(Hg),
    Tl(Tl),
    Pb(Pb),
    Bi,
    Po(Po),
    At(At),
    Rn(Rn),
    Fr,
    Ra(Ra),
    Ac,
    Th(Th),
    Pa,
    U(U),
    Np(Np),
    Pu(Pu),
    Am(Am),
    Cm(Cm),
    Bk(Bk),
    Cf(Cf),
    Es,
    Fm,
    Md(Md),
    No,
    Lr,
    Rf,
    Db,
    Sg,
    Bh,
    Hs,
    Mt,
    Ds,
    Rg,
    Cn,
    Nh,
    Fl,
    Mc,
    Lv,
    Ts,
    Og,
}

impl Isotope {
    /// Element
    pub const fn element(&self) -> Element {
        match self {
            H(_) => Element::H,
            He(_) => Element::He,
            Li(_) => Element::Li,
            Be => Element::Be,
            B(_) => Element::B,
            C(_) => Element::C,
            N(_) => Element::N,
            O(_) => Element::O,
            F => Element::F,
            Ne(_) => Element::Ne,
            Na => Element::Na,
            Mg(_) => Element::Mg,
            Al => Element::Al,
            Si(_) => Element::Si,
            P => Element::P,
            S(_) => Element::S,
            Cl(_) => Element::Cl,
            Ar(_) => Element::Ar,
            K(_) => Element::K,
            Ca(_) => Element::Ca,
            Sc => Element::Sc,
            Ti(_) => Element::Ti,
            V(_) => Element::V,
            Cr(_) => Element::Cr,
            Mn => Element::Mn,
            Fe(_) => Element::Fe,
            Co => Element::Co,
            Ni(_) => Element::Ni,
            Cu(_) => Element::Cu,
            Zn(_) => Element::Zn,
            Ga(_) => Element::Ga,
            Ge(_) => Element::Ge,
            As => Element::As,
            Se(_) => Element::Se,
            Br(_) => Element::Br,
            Kr(_) => Element::Kr,
            Rb(_) => Element::Rb,
            Sr(_) => Element::Sr,
            Y => Element::Y,
            Zr(_) => Element::Zr,
            Nb => Element::Nb,
            Mo(_) => Element::Mo,
            Tc(_) => Element::Tc,
            Ru(_) => Element::Ru,
            Rh => Element::Rh,
            Pd(_) => Element::Pd,
            Ag(_) => Element::Ag,
            Cd(_) => Element::Cd,
            In(_) => Element::In,
            Sn(_) => Element::Sn,
            Sb(_) => Element::Sb,
            Te(_) => Element::Te,
            I => Element::I,
            Xe(_) => Element::Xe,
            Cs => Element::Cs,
            Ba(_) => Element::Ba,
            La(_) => Element::La,
            Ce(_) => Element::Ce,
            Pr => Element::Pr,
            Nd(_) => Element::Nd,
            Pm(_) => Element::Pm,
            Sm(_) => Element::Sm,
            Eu(_) => Element::Eu,
            Gd(_) => Element::Gd,
            Tb => Element::Tb,
            Dy(_) => Element::Dy,
            Ho => Element::Ho,
            Er(_) => Element::Er,
            Tm => Element::Tm,
            Yb(_) => Element::Yb,
            Lu(_) => Element::Lu,
            Hf(_) => Element::Hf,
            Ta(_) => Element::Ta,
            W(_) => Element::W,
            Re(_) => Element::Re,
            Os(_) => Element::Os,
            Ir(_) => Element::Ir,
            Pt(_) => Element::Pt,
            Au => Element::Au,
            Hg(_) => Element::Hg,
            Tl(_) => Element::Tl,
            Pb(_) => Element::Pb,
            Bi => Element::Bi,
            Po(_) => Element::Po,
            At(_) => Element::At,
            Rn(_) => Element::Rn,
            Fr => Element::Fr,
            Ra(_) => Element::Ra,
            Ac => Element::Ac,
            Th(_) => Element::Th,
            Pa => Element::Pa,
            U(_) => Element::U,
            Np(_) => Element::Np,
            Pu(_) => Element::Pu,
            Am(_) => Element::Am,
            Cm(_) => Element::Cm,
            Bk(_) => Element::Bk,
            Cf(_) => Element::Cf,
            Es => Element::Es,
            Fm => Element::Fm,
            Md(_) => Element::Md,
            No => Element::No,
            Lr => Element::Lr,
            Rf => Element::Rf,
            Db => Element::Db,
            Sg => Element::Sg,
            Bh => Element::Bh,
            Hs => Element::Hs,
            Mt => Element::Mt,
            Ds => Element::Ds,
            Rg => Element::Rg,
            Cn => Element::Cn,
            Nh => Element::Nh,
            Fl => Element::Fl,
            Mc => Element::Mc,
            Lv => Element::Lv,
            Ts => Element::Ts,
            Og => Element::Og,
        }
    }

    /// Composition
    pub const fn isotopic_composition(&self) -> Option<Uncertain> {
        match self {
            H(h) => h.isotopic_composition(),
            He(he) => he.isotopic_composition(),
            Li(li) => li.isotopic_composition(),
            Be => Some(uncertain!(1.0)),
            B(b) => b.isotopic_composition(),
            C(c) => c.isotopic_composition(),
            N(n) => n.isotopic_composition(),
            O(o) => o.isotopic_composition(),
            F => Some(uncertain!(1.0)),
            Ne(ne) => ne.isotopic_composition(),
            Na => Some(uncertain!(1.0)),
            Mg(mg) => mg.isotopic_composition(),
            Al => Some(uncertain!(1.0)),
            Si(si) => si.isotopic_composition(),
            P => Some(uncertain!(1.0)),
            S(s) => s.isotopic_composition(),
            Cl(cl) => cl.isotopic_composition(),
            Ar(ar) => ar.isotopic_composition(),
            K(k) => k.isotopic_composition(),
            Ca(ca) => ca.isotopic_composition(),
            Sc => Some(uncertain!(1.0)),
            Ti(ti) => ti.isotopic_composition(),
            V(v) => v.isotopic_composition(),
            Cr(cr) => cr.isotopic_composition(),
            Mn => Some(uncertain!(1.0)),
            Fe(fe) => fe.isotopic_composition(),
            Co => Some(uncertain!(1.0)),
            Ni(ni) => ni.isotopic_composition(),
            Cu(cu) => cu.isotopic_composition(),
            Zn(zn) => zn.isotopic_composition(),
            Ga(ga) => ga.isotopic_composition(),
            Ge(ge) => ge.isotopic_composition(),
            As => Some(uncertain!(1.0)),
            Se(se) => se.isotopic_composition(),
            Br(br) => br.isotopic_composition(),
            Kr(kr) => kr.isotopic_composition(),
            Rb(rb) => rb.isotopic_composition(),
            Sr(sr) => sr.isotopic_composition(),
            Y => Some(uncertain!(1.0)),
            Zr(zr) => zr.isotopic_composition(),
            Nb => Some(uncertain!(1.0)),
            Mo(mo) => mo.isotopic_composition(),
            Tc(tc) => tc.isotopic_composition(),
            Ru(ru) => ru.isotopic_composition(),
            Rh => Some(uncertain!(1.0)),
            Pd(pd) => pd.isotopic_composition(),
            Ag(ag) => ag.isotopic_composition(),
            Cd(cd) => cd.isotopic_composition(),
            In(r#in) => r#in.isotopic_composition(),
            Sn(sn) => sn.isotopic_composition(),
            Sb(sb) => sb.isotopic_composition(),
            Te(te) => te.isotopic_composition(),
            I => Some(uncertain!(1.0)),
            Xe(xe) => xe.isotopic_composition(),
            Cs => Some(uncertain!(1.0)),
            Ba(ba) => ba.isotopic_composition(),
            La(la) => la.isotopic_composition(),
            Ce(ce) => ce.isotopic_composition(),
            Pr => Some(uncertain!(1.0)),
            Nd(nd) => nd.isotopic_composition(),
            Pm(pm) => pm.isotopic_composition(),
            Sm(sm) => sm.isotopic_composition(),
            Eu(eu) => eu.isotopic_composition(),
            Gd(gd) => gd.isotopic_composition(),
            Tb => Some(uncertain!(1.0)),
            Dy(dy) => dy.isotopic_composition(),
            Ho => Some(uncertain!(1.0)),
            Er(er) => er.isotopic_composition(),
            Tm => Some(uncertain!(1.0)),
            Yb(yb) => yb.isotopic_composition(),
            Lu(lu) => lu.isotopic_composition(),
            Hf(hf) => hf.isotopic_composition(),
            Ta(ta) => ta.isotopic_composition(),
            W(w) => w.isotopic_composition(),
            Re(re) => re.isotopic_composition(),
            Os(os) => os.isotopic_composition(),
            Ir(ir) => ir.isotopic_composition(),
            Pt(pt) => pt.isotopic_composition(),
            Au => Some(uncertain!(1.0)),
            Hg(hg) => hg.isotopic_composition(),
            Tl(tl) => tl.isotopic_composition(),
            Pb(pb) => pb.isotopic_composition(),
            Bi => Some(uncertain!(1.0)),
            Po(po) => po.isotopic_composition(),
            At(at) => at.isotopic_composition(),
            Rn(rn) => rn.isotopic_composition(),
            Fr => None,
            Ra(ra) => ra.isotopic_composition(),
            Ac => None,
            Th(th) => th.isotopic_composition(),
            Pa => Some(uncertain!(1.0)),
            U(u) => u.isotopic_composition(),
            Np(np) => np.isotopic_composition(),
            Pu(pu) => pu.isotopic_composition(),
            Am(am) => am.isotopic_composition(),
            Cm(cm) => cm.isotopic_composition(),
            Bk(bk) => bk.isotopic_composition(),
            Cf(cf) => cf.isotopic_composition(),
            Es => None,
            Fm => None,
            Md(md) => md.isotopic_composition(),
            No => None,
            Lr => None,
            Rf => None,
            Db => None,
            Sg => None,
            Bh => None,
            Hs => None,
            Mt => None,
            Ds => None,
            Rg => None,
            Cn => None,
            Nh => None,
            Fl => None,
            Mc => None,
            Lv => None,
            Ts => None,
            Og => None,
        }
    }

    /// Mass number
    pub const fn mass_number(&self) -> usize {
        match self {
            H(h) => h.mass_number(),
            He(he) => he.mass_number(),
            Li(li) => li.mass_number(),
            Be => 9,
            B(b) => b.mass_number(),
            C(c) => c.mass_number(),
            N(n) => n.mass_number(),
            O(o) => o.mass_number(),
            F => 19,
            Ne(ne) => ne.mass_number(),
            Na => 23,
            Mg(mg) => mg.mass_number(),
            Al => 27,
            Si(si) => si.mass_number(),
            P => 31,
            S(s) => s.mass_number(),
            Cl(cl) => cl.mass_number(),
            Ar(ar) => ar.mass_number(),
            K(k) => k.mass_number(),
            Ca(ca) => ca.mass_number(),
            Sc => 45,
            Ti(ti) => ti.mass_number(),
            V(v) => v.mass_number(),
            Cr(cr) => cr.mass_number(),
            Mn => 55,
            Fe(fe) => fe.mass_number(),
            Co => 59,
            Ni(ni) => ni.mass_number(),
            Cu(cu) => cu.mass_number(),
            Zn(zn) => zn.mass_number(),
            Ga(ga) => ga.mass_number(),
            Ge(ge) => ge.mass_number(),
            As => 75,
            Se(se) => se.mass_number(),
            Br(br) => br.mass_number(),
            Kr(kr) => kr.mass_number(),
            Rb(rb) => rb.mass_number(),
            Sr(sr) => sr.mass_number(),
            Y => 89,
            Zr(zr) => zr.mass_number(),
            Nb => 93,
            Mo(mo) => mo.mass_number(),
            Tc(tc) => tc.mass_number(),
            Ru(ru) => ru.mass_number(),
            Rh => 103,
            Pd(pd) => pd.mass_number(),
            Ag(ag) => ag.mass_number(),
            Cd(cd) => cd.mass_number(),
            In(r#in) => r#in.mass_number(),
            Sn(sn) => sn.mass_number(),
            Sb(sb) => sb.mass_number(),
            Te(te) => te.mass_number(),
            I => 127,
            Xe(xe) => xe.mass_number(),
            Cs => 133,
            Ba(ba) => ba.mass_number(),
            La(la) => la.mass_number(),
            Ce(ce) => ce.mass_number(),
            Pr => 141,
            Nd(nd) => nd.mass_number(),
            Pm(pm) => pm.mass_number(),
            Sm(sm) => sm.mass_number(),
            Eu(eu) => eu.mass_number(),
            Gd(gd) => gd.mass_number(),
            Tb => 159,
            Dy(dy) => dy.mass_number(),
            Ho => 165,
            Er(er) => er.mass_number(),
            Tm => 169,
            Yb(yb) => yb.mass_number(),
            Lu(lu) => lu.mass_number(),
            Hf(hf) => hf.mass_number(),
            Ta(ta) => ta.mass_number(),
            W(w) => w.mass_number(),
            Re(re) => re.mass_number(),
            Os(os) => os.mass_number(),
            Ir(ir) => ir.mass_number(),
            Pt(pt) => pt.mass_number(),
            Au => 197,
            Hg(hg) => hg.mass_number(),
            Tl(tl) => tl.mass_number(),
            Pb(pb) => pb.mass_number(),
            Bi => 209,
            Po(po) => po.mass_number(),
            At(at) => at.mass_number(),
            Rn(rn) => rn.mass_number(),
            Fr => 223,
            Ra(ra) => ra.mass_number(),
            Ac => 227,
            Th(th) => th.mass_number(),
            Pa => 231,
            U(u) => u.mass_number(),
            Np(np) => np.mass_number(),
            Pu(pu) => pu.mass_number(),
            Am(am) => am.mass_number(),
            Cm(cm) => cm.mass_number(),
            Bk(bk) => bk.mass_number(),
            Cf(cf) => cf.mass_number(),
            Es => 252,
            Fm => 257,
            Md(md) => md.mass_number(),
            No => 259,
            Lr => 262,
            Rf => 267,
            Db => 268,
            Sg => 271,
            Bh => 272,
            Hs => 270,
            Mt => 276,
            Ds => 281,
            Rg => 280,
            Cn => 285,
            Nh => 284,
            Fl => 289,
            Mc => 288,
            Lv => 293,
            Ts => 292,
            Og => 294,
        }
    }

    /// Relative atomic mass
    pub const fn relative_atomic_mass(&self) -> Uncertain {
        match self {
            H(h) => h.relative_atomic_mass(),
            He(he) => he.relative_atomic_mass(),
            Li(li) => li.relative_atomic_mass(),
            Be => uncertain!(9.012183065, 0.000000082),
            B(b) => b.relative_atomic_mass(),
            C(c) => c.relative_atomic_mass(),
            N(n) => n.relative_atomic_mass(),
            O(o) => o.relative_atomic_mass(),
            F => uncertain!(18.99840316273, 0.00000000092),
            Ne(ne) => ne.relative_atomic_mass(),
            Na => uncertain!(22.9897692820, 0.0000000019),
            Mg(mg) => mg.relative_atomic_mass(),
            Al => uncertain!(26.98153853, 0.00000011),
            Si(si) => si.relative_atomic_mass(),
            P => uncertain!(30.97376199842, 0.00000000070),
            S(s) => s.relative_atomic_mass(),
            Cl(cl) => cl.relative_atomic_mass(),
            Ar(ar) => ar.relative_atomic_mass(),
            K(k) => k.relative_atomic_mass(),
            Ca(ca) => ca.relative_atomic_mass(),
            Sc => uncertain!(44.95590828, 0.00000077),
            Ti(ti) => ti.relative_atomic_mass(),
            V(v) => v.relative_atomic_mass(),
            Cr(cr) => cr.relative_atomic_mass(),
            Mn => uncertain!(54.93804391, 0.00000048),
            Fe(fe) => fe.relative_atomic_mass(),
            Co => uncertain!(58.93319429, 0.00000056),
            Ni(ni) => ni.relative_atomic_mass(),
            Cu(cu) => cu.relative_atomic_mass(),
            Zn(zn) => zn.relative_atomic_mass(),
            Ga(ga) => ga.relative_atomic_mass(),
            Ge(ge) => ge.relative_atomic_mass(),
            As => uncertain!(74.92159457, 0.00000095),
            Se(se) => se.relative_atomic_mass(),
            Br(br) => br.relative_atomic_mass(),
            Kr(kr) => kr.relative_atomic_mass(),
            Rb(rb) => rb.relative_atomic_mass(),
            Sr(sr) => sr.relative_atomic_mass(),
            Y => uncertain!(88.9058403, 0.0000024),
            Zr(zr) => zr.relative_atomic_mass(),
            Nb => uncertain!(92.9063730, 0.0000020),
            Mo(mo) => mo.relative_atomic_mass(),
            Tc(tc) => tc.relative_atomic_mass(),
            Ru(ru) => ru.relative_atomic_mass(),
            Rh => uncertain!(102.9054980, 0.0000026),
            Pd(pd) => pd.relative_atomic_mass(),
            Ag(ag) => ag.relative_atomic_mass(),
            Cd(cd) => cd.relative_atomic_mass(),
            In(r#in) => r#in.relative_atomic_mass(),
            Sn(sn) => sn.relative_atomic_mass(),
            Sb(sb) => sb.relative_atomic_mass(),
            Te(te) => te.relative_atomic_mass(),
            I => uncertain!(126.9044719, 0.0000039),
            Xe(xe) => xe.relative_atomic_mass(),
            Cs => uncertain!(132.9054519610, 0.0000000080),
            Ba(ba) => ba.relative_atomic_mass(),
            La(la) => la.relative_atomic_mass(),
            Ce(ce) => ce.relative_atomic_mass(),
            Pr => uncertain!(140.9076576, 0.0000023),
            Nd(nd) => nd.relative_atomic_mass(),
            Pm(pm) => pm.relative_atomic_mass(),
            Sm(sm) => sm.relative_atomic_mass(),
            Eu(eu) => eu.relative_atomic_mass(),
            Gd(gd) => gd.relative_atomic_mass(),
            Tb => uncertain!(158.9253547, 0.0000019),
            Dy(dy) => dy.relative_atomic_mass(),
            Ho => uncertain!(164.9303288, 0.0000021),
            Er(er) => er.relative_atomic_mass(),
            Tm => uncertain!(168.9342179, 0.0000022),
            Yb(yb) => yb.relative_atomic_mass(),
            Lu(lu) => lu.relative_atomic_mass(),
            Hf(hf) => hf.relative_atomic_mass(),
            Ta(ta) => ta.relative_atomic_mass(),
            W(w) => w.relative_atomic_mass(),
            Re(re) => re.relative_atomic_mass(),
            Os(os) => os.relative_atomic_mass(),
            Ir(ir) => ir.relative_atomic_mass(),
            Pt(pt) => pt.relative_atomic_mass(),
            Au => uncertain!(196.96656879, 0.00000071),
            Hg(hg) => hg.relative_atomic_mass(),
            Tl(tl) => tl.relative_atomic_mass(),
            Pb(pb) => pb.relative_atomic_mass(),
            Bi => uncertain!(208.9803991, 0.0000016),
            Po(po) => po.relative_atomic_mass(),
            At(at) => at.relative_atomic_mass(),
            Rn(rn) => rn.relative_atomic_mass(),
            Fr => uncertain!(223.0197360, 0.0000025),
            Ra(ra) => ra.relative_atomic_mass(),
            Ac => uncertain!(227.0277523, 0.0000025),
            Th(th) => th.relative_atomic_mass(),
            Pa => uncertain!(231.0358842, 0.0000024),
            U(u) => u.relative_atomic_mass(),
            Np(np) => np.relative_atomic_mass(),
            Pu(pu) => pu.relative_atomic_mass(),
            Am(am) => am.relative_atomic_mass(),
            Cm(cm) => cm.relative_atomic_mass(),
            Bk(bk) => bk.relative_atomic_mass(),
            Cf(cf) => cf.relative_atomic_mass(),
            Es => uncertain!(252.082980, 0.000054),
            Fm => uncertain!(257.0951061, 0.0000069),
            Md(md) => md.relative_atomic_mass(),
            No => uncertain!(259.10103, 0.00011),
            Lr => uncertain!(262.10961, 0.00022),
            Rf => uncertain!(267.12179, 0.00062),
            Db => uncertain!(268.12567, 0.00057),
            Sg => uncertain!(271.13393, 0.00063),
            Bh => uncertain!(272.13826, 0.00058),
            Hs => uncertain!(270.13429, 0.00027),
            Mt => uncertain!(276.15159, 0.00059),
            Ds => uncertain!(281.16451, 0.00059),
            Rg => uncertain!(280.16514, 0.00061),
            Cn => uncertain!(285.17712, 0.00060),
            Nh => uncertain!(284.17873, 0.00062),
            Fl => uncertain!(289.19042, 0.00060),
            Mc => uncertain!(288.19274, 0.00062),
            Lv => uncertain!(293.20449, 0.00060),
            Ts => uncertain!(292.20746, 0.00075),
            Og => uncertain!(294.21392, 0.00071),
        }
    }

    /// Symbol
    pub const fn symbol(&self) -> &'static str {
        match self {
            H(H::Two) => "D",
            H(H::Three) => "T",
            isotope => isotope.element().symbol(),
        }
    }
}

impl From<Isotope> for Element {
    fn from(value: Isotope) -> Self {
        value.element()
    }
}

impl FromStr for Isotope {
    type Err = Error;

    fn from_str(value: &str) -> Result<Self> {
        match value {
            "H" => Ok(H(H::iter().max_by_key(H::isotopic_composition).unwrap())),
            "He" => Ok(He(He::iter().max_by_key(He::isotopic_composition).unwrap())),
            "Li" => Ok(Li(Li::iter().max_by_key(Li::isotopic_composition).unwrap())),
            "Be" => Ok(Be),
            "B" => Ok(B(B::iter().max_by_key(B::isotopic_composition).unwrap())),
            "C" => Ok(C(C::iter().max_by_key(C::isotopic_composition).unwrap())),
            "N" => Ok(N(N::iter().max_by_key(N::isotopic_composition).unwrap())),
            "O" => Ok(O(O::iter().max_by_key(O::isotopic_composition).unwrap())),
            "F" => Ok(F),
            "Ne" => Ok(Ne(Ne::iter().max_by_key(Ne::isotopic_composition).unwrap())),
            "Na" => Ok(Na),
            "Mg" => Ok(Mg(Mg::iter().max_by_key(Mg::isotopic_composition).unwrap())),
            "Al" => Ok(Al),
            "Si" => Ok(Si(Si::iter().max_by_key(Si::isotopic_composition).unwrap())),
            "P" => Ok(P),
            "S" => Ok(S(S::iter().max_by_key(S::isotopic_composition).unwrap())),
            "Cl" => Ok(Cl(Cl::iter().max_by_key(Cl::isotopic_composition).unwrap())),
            "Ar" => Ok(Ar(Ar::iter().max_by_key(Ar::isotopic_composition).unwrap())),
            "K" => Ok(K(K::iter().max_by_key(K::isotopic_composition).unwrap())),
            "Ca" => Ok(Ca(Ca::iter().max_by_key(Ca::isotopic_composition).unwrap())),
            "Sc" => Ok(Sc),
            "Ti" => Ok(Ti(Ti::iter().max_by_key(Ti::isotopic_composition).unwrap())),
            "V" => Ok(V(V::iter().max_by_key(V::isotopic_composition).unwrap())),
            "Cr" => Ok(Cr(Cr::iter().max_by_key(Cr::isotopic_composition).unwrap())),
            "Mn" => Ok(Mn),
            "Fe" => Ok(Fe(Fe::iter().max_by_key(Fe::isotopic_composition).unwrap())),
            "Co" => Ok(Co),
            "Ni" => Ok(Ni(Ni::iter().max_by_key(Ni::isotopic_composition).unwrap())),
            "Cu" => Ok(Cu(Cu::iter().max_by_key(Cu::isotopic_composition).unwrap())),
            "Zn" => Ok(Zn(Zn::iter().max_by_key(Zn::isotopic_composition).unwrap())),
            "Ga" => Ok(Ga(Ga::iter().max_by_key(Ga::isotopic_composition).unwrap())),
            "Ge" => Ok(Ge(Ge::iter().max_by_key(Ge::isotopic_composition).unwrap())),
            "As" => Ok(As),
            "Se" => Ok(Se(Se::iter().max_by_key(Se::isotopic_composition).unwrap())),
            "Br" => Ok(Br(Br::iter().max_by_key(Br::isotopic_composition).unwrap())),
            "Kr" => Ok(Kr(Kr::iter().max_by_key(Kr::isotopic_composition).unwrap())),
            "Rb" => Ok(Rb(Rb::iter().max_by_key(Rb::isotopic_composition).unwrap())),
            "Sr" => Ok(Sr(Sr::iter().max_by_key(Sr::isotopic_composition).unwrap())),
            "Y" => Ok(Y),
            "Zr" => Ok(Zr(Zr::iter().max_by_key(Zr::isotopic_composition).unwrap())),
            "Nb" => Ok(Nb),
            "Mo" => Ok(Mo(Mo::iter().max_by_key(Mo::isotopic_composition).unwrap())),
            "Tc" => Ok(Tc(Tc::iter().max_by_key(Tc::isotopic_composition).unwrap())),
            "Ru" => Ok(Ru(Ru::iter().max_by_key(Ru::isotopic_composition).unwrap())),
            "Rh" => Ok(Rh),
            "Pd" => Ok(Pd(Pd::iter().max_by_key(Pd::isotopic_composition).unwrap())),
            "Ag" => Ok(Ag(Ag::iter().max_by_key(Ag::isotopic_composition).unwrap())),
            "Cd" => Ok(Cd(Cd::iter().max_by_key(Cd::isotopic_composition).unwrap())),
            "In" => Ok(In(In::iter().max_by_key(In::isotopic_composition).unwrap())),
            "Sn" => Ok(Sn(Sn::iter().max_by_key(Sn::isotopic_composition).unwrap())),
            "Sb" => Ok(Sb(Sb::iter().max_by_key(Sb::isotopic_composition).unwrap())),
            "Te" => Ok(Te(Te::iter().max_by_key(Te::isotopic_composition).unwrap())),
            "I" => Ok(I),
            "Xe" => Ok(Xe(Xe::iter().max_by_key(Xe::isotopic_composition).unwrap())),
            "Cs" => Ok(Cs),
            "Ba" => Ok(Ba(Ba::iter().max_by_key(Ba::isotopic_composition).unwrap())),
            "La" => Ok(La(La::iter().max_by_key(La::isotopic_composition).unwrap())),
            "Ce" => Ok(Ce(Ce::iter().max_by_key(Ce::isotopic_composition).unwrap())),
            "Pr" => Ok(Pr),
            "Nd" => Ok(Nd(Nd::iter().max_by_key(Nd::isotopic_composition).unwrap())),
            "Pm" => Ok(Pm(Pm::iter().max_by_key(Pm::isotopic_composition).unwrap())),
            "Sm" => Ok(Sm(Sm::iter().max_by_key(Sm::isotopic_composition).unwrap())),
            "Eu" => Ok(Eu(Eu::iter().max_by_key(Eu::isotopic_composition).unwrap())),
            "Gd" => Ok(Gd(Gd::iter().max_by_key(Gd::isotopic_composition).unwrap())),
            "Tb" => Ok(Tb),
            "Dy" => Ok(Dy(Dy::iter().max_by_key(Dy::isotopic_composition).unwrap())),
            "Ho" => Ok(Ho),
            "Er" => Ok(Er(Er::iter().max_by_key(Er::isotopic_composition).unwrap())),
            "Tm" => Ok(Tm),
            "Yb" => Ok(Yb(Yb::iter().max_by_key(Yb::isotopic_composition).unwrap())),
            "Lu" => Ok(Lu(Lu::iter().max_by_key(Lu::isotopic_composition).unwrap())),
            "Hf" => Ok(Hf(Hf::iter().max_by_key(Hf::isotopic_composition).unwrap())),
            "Ta" => Ok(Ta(Ta::iter().max_by_key(Ta::isotopic_composition).unwrap())),
            "W" => Ok(W(W::iter().max_by_key(W::isotopic_composition).unwrap())),
            "Re" => Ok(Re(Re::iter().max_by_key(Re::isotopic_composition).unwrap())),
            "Os" => Ok(Os(Os::iter().max_by_key(Os::isotopic_composition).unwrap())),
            "Ir" => Ok(Ir(Ir::iter().max_by_key(Ir::isotopic_composition).unwrap())),
            "Pt" => Ok(Pt(Pt::iter().max_by_key(Pt::isotopic_composition).unwrap())),
            "Au" => Ok(Au),
            "Hg" => Ok(Hg(Hg::iter().max_by_key(Hg::isotopic_composition).unwrap())),
            "Tl" => Ok(Tl(Tl::iter().max_by_key(Tl::isotopic_composition).unwrap())),
            "Pb" => Ok(Pb(Pb::iter().max_by_key(Pb::isotopic_composition).unwrap())),
            "Bi" => Ok(Bi),
            "Po" => Ok(Po(Po::iter().max_by_key(Po::isotopic_composition).unwrap())),
            "At" => Ok(At(At::iter().max_by_key(At::isotopic_composition).unwrap())),
            "Rn" => Ok(Rn(Rn::iter().max_by_key(Rn::isotopic_composition).unwrap())),
            "Fr" => Ok(Fr),
            "Ra" => Ok(Ra(Ra::iter().max_by_key(Ra::isotopic_composition).unwrap())),
            "Ac" => Ok(Ac),
            "Th" => Ok(Th(Th::iter().max_by_key(Th::isotopic_composition).unwrap())),
            "Pa" => Ok(Pa),
            "U" => Ok(U(U::iter().max_by_key(U::isotopic_composition).unwrap())),
            "Np" => Ok(Np(Np::iter().max_by_key(Np::isotopic_composition).unwrap())),
            "Pu" => Ok(Pu(Pu::iter().max_by_key(Pu::isotopic_composition).unwrap())),
            "Am" => Ok(Am(Am::iter().max_by_key(Am::isotopic_composition).unwrap())),
            "Cm" => Ok(Cm(Cm::iter().max_by_key(Cm::isotopic_composition).unwrap())),
            "Bk" => Ok(Bk(Bk::iter().max_by_key(Bk::isotopic_composition).unwrap())),
            "Cf" => Ok(Cf(Cf::iter().max_by_key(Cf::isotopic_composition).unwrap())),
            "Es" => Ok(Es),
            "Fm" => Ok(Fm),
            "Md" => Ok(Md(Md::iter().max_by_key(Md::isotopic_composition).unwrap())),
            "No" => Ok(No),
            "Lr" => Ok(Lr),
            "Rf" => Ok(Rf),
            "Db" => Ok(Db),
            "Sg" => Ok(Sg),
            "Bh" => Ok(Bh),
            "Hs" => Ok(Hs),
            "Mt" => Ok(Mt),
            "Ds" => Ok(Ds),
            "Rg" => Ok(Rg),
            "Cn" => Ok(Cn),
            "Nh" => Ok(Nh),
            "Fl" => Ok(Fl),
            "Mc" => Ok(Mc),
            "Lv" => Ok(Lv),
            "Ts" => Ok(Ts),
            "Og" => Ok(Og),
            _ => Err(Error::Parse),
        }
    }
}

// /// Measurement
// pub trait Measurement {
//     fn minimum(&self) -> f64;
//     fn medium(&self) -> f64;
//     fn maximum(&self) -> f64;
// }
// impl Measurement for Uncertain {
//     fn minimum(&self) -> f64 {
//         self.minimum()
//     }
//     fn medium(&self) -> f64 {
//         self.medium()
//     }
//     fn maximum(&self) -> f64 {
//         self.maximum()
//     }
// }

/// Notes
///
/// Notes for Representative Isotopic Composition and Standard Atomic Weight.
///
/// - g - Geological materials are known in which the element has an isotopic
///   composition outside the limits for normal material. The difference between
///   the atomic weight of the element in such materials and that given in the
///   table may exceed the stated uncertainty.
/// - m - Modified isotopic compositions may be found in commercially available
///   material because the material has been subjected to an undisclosed or
///   inadvertent isotopic fractionation. Substantial deviations in atomic
///   weight of the element from that given in the table can occur.
/// - r - Range in isotopic composition of normal terrestrial material prevents
///   a more precise standard atomic weight being given; the tabulated
///   atomic-weight value and uncertainty should be applicable to normal
///   materials.
pub enum Notes {
    G,
    M,
    R,
}
